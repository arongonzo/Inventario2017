
package Formularios;

import Entidades.Producto;
import Entidades.SolicitudProgramadaDetalle;
import Logico.ProductoLog;

import Entidades.View_ReporteSolicitudProgramada;
import Logico.View_ReporteSolicitudProgramadaLog;
import ModeloTabla.ModeloTablaProducto;
import ModeloTabla.ModeloTablaProramadaDetalle;
import ModeloTabla.ModeloTablaView_ProductosSolicitados;

import Entidades.SolicitudProgramadaDetalle;
import Logico.SolicitudProgramadaDetalleLog;
import ModeloTabla.ModeloTablaProramadaDetalle;

import ModeloTabla.ModeloTablaView_ReporteSolicitudProgramada;
import clases.Datos;

import clases.Inventario;
import clases.Render;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.*;
import java.util.TreeMap;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hwpf.model.FileInformationBlock;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.IndexedColors;

import org.apache.poi.xssf.usermodel.*;

public class FrmInformeReporteAnual extends javax.swing.JInternalFrame {

    View_ReporteSolicitudProgramada obxdatos;
    View_ReporteSolicitudProgramadaLog claselog;
    ModeloTablaView_ReporteSolicitudProgramada modelo;
    
    SolicitudProgramadaDetalleLog programadasdetalle;
    SolicitudProgramadaDetalle pgrd;
    ModeloTablaProramadaDetalle mtpd;
    
    
    public FrmInformeReporteAnual() {
        initComponents();
        int id_usuario = Integer.parseInt(Inventario.global_llaveusuario);
        
        claselog = new View_ReporteSolicitudProgramadaLog();
        programadasdetalle = new SolicitudProgramadaDetalleLog();
        
        ListarTabla();
    }
    
    private void ListarTabla() {
        List<View_ReporteSolicitudProgramada> listas = claselog.listado();
        modelo = new ModeloTablaView_ReporteSolicitudProgramada
        (
            listas
        )
        {
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        jTable1.getRowSorter();
        TableColumnModel m = jTable1.getColumnModel();
        
        jTable1.setDefaultRenderer(Object.class, new Render());
        JButton btn1 = new JButton("modificar");
        
        jTable1.setModel(modelo);
        jTable1.setRowHeight(30);
        jTable1.getRowSorter();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlgrid = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        pnlgrid.setBorder(javax.swing.BorderFactory.createTitledBorder("SOLICITUD PROGRAMADA ANUAL"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout pnlgridLayout = new javax.swing.GroupLayout(pnlgrid);
        pnlgrid.setLayout(pnlgridLayout);
        pnlgridLayout.setHorizontalGroup(
            pnlgridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlgridLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlgridLayout.setVerticalGroup(
            pnlgridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlgridLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlgrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlgrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlgrid.getAccessibleContext().setAccessibleName("Solicitudes Programadas Anual");
        pnlgrid.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        obxdatos = ((ModeloTablaView_ReporteSolicitudProgramada) jTable1.getModel()).DameProgramadaDetalle(jTable1.getSelectedRow());
        
        int llave = obxdatos.getIdProgramada();
        
        int column = jTable1.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY()/jTable1.getRowHeight();
        
        if(row < jTable1.getRowCount() && row >= 0 && column < jTable1.getColumnCount() && column >= 0) {
            Object value = jTable1.getValueAt(row, column);
            if(value instanceof JButton){
                ((JButton)value).doClick();
                generar_Reporte(llave);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void generar_Reporte(int llaveprogramada){
        try
        {

            String llave = Inventario.global_llaveusuario;
            int llave_usuario = Integer.parseInt(Inventario.global_llaveusuario);
            String stx_zonal = "";
            String stx_unidad = "";
            String stx_sistema = "";

            String stx_Pista = "";
            String stx_marca = "";
            String stx_modelo = "";
            String reportDate = "";
            
            
            
            ResultSet objResultSet;
            objResultSet = Conecciones.Coneccion.consulta(" SELECT zonal.nombre_zonal, unidad.nombre_unidad, sistema.nombre_sistema, solicitud_programada.pista, solicitud_programada.marca, solicitud_programada.modelo, " +
                                                            " solicitud_programada.fecha_solicitud " +
                                                            " FROM            sistema INNER JOIN " +
                                                            " solicitud_programada ON sistema.id_sistema = solicitud_programada.id_sistema LEFT OUTER JOIN " +
                                                            " zonal INNER JOIN " +
                                                            " unidad ON zonal.id_zonal = unidad.id_zonal ON solicitud_programada.id_unidad = unidad.id_unidad " +
                                                            " WHERE (solicitud_programada.id_programada = "+ llaveprogramada +")");

            while (objResultSet.next())
            {
                
                stx_zonal = objResultSet.getString("nombre_zonal");
                stx_unidad = objResultSet.getString("nombre_unidad");
                stx_sistema = objResultSet.getString("nombre_sistema");
                
                stx_Pista = objResultSet.getString("pista");
                stx_marca = objResultSet.getString("marca");
                stx_modelo = objResultSet.getString("modelo");
                
                if(objResultSet.getString("fecha_solicitud") != null)
                {
                  Date date = objResultSet.getDate("fecha_solicitud");
                  SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                   reportDate = df.format(date);
                } 
            }
              
            long datetimemlli= Datos.DatetoMilisecond(new Date());
            
            XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream("c:/excel/template_reporterepuestoanual.xlsx"));
            
            XSSFSheet ws = wb.getSheetAt(0);
            /*
            XSSFSheet ws = wb.createSheet("Inventario_completo");
            */
            
            List<View_ReporteSolicitudProgramada> listas = claselog.listado();
            modelo = new ModeloTablaView_ReporteSolicitudProgramada(listas);
            
            List<SolicitudProgramadaDetalle> listasdetalle = programadasdetalle.listado(llaveprogramada);
            mtpd = new ModeloTablaProramadaDetalle(listasdetalle);
            
            //load data to treemap
            TreeMap<String,Object[]> data = new TreeMap<>();
            int pos = 0;
            //data.put("0",new Object[]{mtp.getColumnName(0), mtp.getColumnName(1),mtp.getColumnName(2), mtp.getColumnName(3), mtp.getColumnName(4), mtp.getColumnName(5)});

            for (SolicitudProgramadaDetalle prd : mtpd.ProgramadaDetalles) {
                data.put(String.valueOf(pos + 1),new Object[]{mtpd.getValueAt(pos,0), mtpd.getValueAt(pos,1),mtpd.getValueAt(pos,2), mtpd.getValueAt(pos,3), mtpd.getValueAt(pos,4), mtpd.getValueAt(pos,5)});
                pos++;
            }

                XSSFCellStyle cs = wb.createCellStyle();
                XSSFDataFormat dt = wb.createDataFormat();

                Set<String> ids = data.keySet();
                XSSFRow row;
            
            row=ws.createRow(7);
            cs.setDataFormat(dt.getFormat("0"));
            cs.setBorderRight(CellStyle.BORDER_THIN);
            cs.setRightBorderColor(IndexedColors.WHITE.getIndex());
            cs.setBorderBottom(CellStyle.BORDER_THIN);
            cs.setBottomBorderColor(IndexedColors.WHITE.getIndex());
            cs.setBorderLeft(CellStyle.BORDER_THIN);
            cs.setLeftBorderColor(IndexedColors.WHITE.getIndex());
            cs.setBorderTop(CellStyle.BORDER_THIN);
            cs.setTopBorderColor(IndexedColors.WHITE.getIndex());
                
            Cell cell = row.createCell(1);
            cell.setCellValue("Zonal");
            cell.setCellStyle(cs);
            
            cell = row.createCell(2);
            cell.setCellValue(stx_zonal);
            cell.setCellStyle(cs);
            
            cell = row.createCell(3);
            cell.setCellValue("Unidad");
            cell.setCellStyle(cs);
            
            cell = row.createCell(4);
            cell.setCellValue(stx_unidad);
            cell.setCellStyle(cs);
            
            cell = row.createCell(0);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(5);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(6);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            /*fila 2*/
            row=ws.createRow(9);
            cell = row.createCell(1);
            cell.setCellValue("Pista");
            cell.setCellStyle(cs);
            
            cell = row.createCell(2);
            cell.setCellValue(stx_Pista);
            cell.setCellStyle(cs);
            
            cell = row.createCell(3);
            cell.setCellValue("Fecha");
            cell.setCellStyle(cs);
            
            cell = row.createCell(4);
            cell.setCellValue(reportDate);
            cell.setCellStyle(cs);
            
            cell = row.createCell(0);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(5);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(6);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            /*fila 3*/
            row=ws.createRow(10);
            cell = row.createCell(1);
            cell.setCellValue("Sistema / Equipo");
            cell.setCellStyle(cs);
            
            cell = row.createCell(2);
            cell.setCellValue(stx_sistema);
            cell.setCellStyle(cs);
            
            cell = row.createCell(3);
            cell.setCellValue("Marca");
            cell.setCellStyle(cs);
            
            cell = row.createCell(4);
            cell.setCellValue(stx_marca);
            cell.setCellStyle(cs);
            
            cell = row.createCell(0);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(5);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(6);
            cell.setCellValue("");
            cell.setCellStyle(cs);
             /* fila 4*/
             
             row=ws.createRow(11);
             cell = row.createCell(1);
            cell.setCellValue("Modelo");
            cell.setCellStyle(cs);
            
            cell = row.createCell(2);
            cell.setCellValue(stx_modelo);
            cell.setCellStyle(cs);
            
            cell = row.createCell(3);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(4);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(0);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(5);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            cell = row.createCell(6);
            cell.setCellValue("");
            cell.setCellStyle(cs);
            
            int rowId=14;
            int rowfila =1;
            for(String key:ids)
                
            {
                
                CellStyle numberStyle = wb.createCellStyle();
                numberStyle.setDataFormat(dt.getFormat("0"));
                numberStyle.setBorderRight(CellStyle.BORDER_THIN);
                numberStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());
                numberStyle.setBorderBottom(CellStyle.BORDER_THIN);
                numberStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
                numberStyle.setBorderLeft(CellStyle.BORDER_THIN);
                numberStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
                numberStyle.setBorderTop(CellStyle.BORDER_THIN);
                numberStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());
                
                row=ws.createRow(rowId++);
                Object[] values = data.get(key);

                int cellId =1;
                
                
                cell = row.createCell(0);
                cell.setCellValue(rowfila);
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(1);
                cell.setCellValue(values[0].toString());
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(2);
                cell.setCellValue(values[1].toString());
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(3);
                cell.setCellValue(values[2].toString());
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(4);
                cell.setCellValue(values[3].toString());
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(5);
                cell.setCellValue(Integer.parseInt(values[4].toString()));
                cell.setCellStyle(numberStyle);
                
                cell = row.createCell(6);
                cell.setCellValue(Integer.parseInt(values[5].toString()));
                cell.setCellStyle(numberStyle);

                rowfila++;
            }

            FileOutputStream fos= new FileOutputStream(new File("c:/excel/ExcelReporteAnual_" + String.valueOf(datetimemlli) + ".xlsx"));
            wb.write(fos);
            fos.close();
            JOptionPane.showMessageDialog(null, "Datos exportados en c:/excel/ExcelReporteAnual_" + String.valueOf(datetimemlli) + ".xlsx" );
            
        } 
        catch(FileNotFoundException ex)
        {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error en " + ex);
        } 
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error en " + ex);
        }
        catch (Exception ex) 
        {
            System.out.println(ex.getCause());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel pnlgrid;
    // End of variables declaration//GEN-END:variables
}
